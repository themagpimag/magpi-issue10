BASH (Born Again Shell) has been the default LINUX shell for several years.  The aim of this series is to give an overview of the BASH shell, providing a description of the syntax and built in functions.  BASH is great for lashing together several different programs with minimal overhead.  For this reason, this of series of articles is called "BASH Gaffa Tape".

When reading these articles, it may prove useful to consult the BASH manual page by typing man bash.  The search commands available within man and other commands can be found in the less manual page.

Running BASH

When a terminal window is opened a shell interpreter is started.  The default shell for the current user can be printed by typing,

echo $SHELL

The default shell is set for each user within /etc/passwd or via NIS or LDAP.  For example,

grep pi /etc/passwd

returns

..something..

Scripts can be run by typing the commands directly into a terminal window or by using a shell script text file.  A shell script file can be run in two ways: by sourcing the script

source script.sh

which is equivalent to

. script.sh

or by executing the script,

./script.sh

When a file is sourced, it is as if the file was typed into the current shell.  Any variables which are declared in the script remain set when the script finishes.  The script also has access to all of the variables declared in the current shell.  In contrast, when a script is executed a new bash interpreter session is started.  At the end of the bash session any local variables are cleaned up.

To execute a script, the path to the BASH interpreter should be given at the top of the file:

#!/bin/bash

Then the file should be made executable

chmod u+x script.sh

Finally, it is possible to type ./script.sh to execute the script.

Use nano (documented in the issue 3 C cave article) to create a hello.sh file containing:

#!/bin/bash
# A simple script to print a string.
echo "In the beginning.." # Use an echo command.

Then make the file executable and execute the script.  The echo command prints the string on the screen using the standard out.  Strings starting with "#" are comments.  Comments can be added on a separate line or at the end of a line.

Pipe operator

A series of commands can be chained together using the pipe "|" operator.  A pipe has the effect of passing the standard out from one command to the standard in of another command.  This is especially useful when handling strings,

# Print "Hello Joe" then replace Joe with Fred. 
echo "Hello Joe" | sed 's/Joe/Fred/g'

# Replace Hello with Goodbye too.
echo "Hello Joe" | sed 's/Joe/Fred/g' | sed 's/Hello/Goodbye/g' 

In this example the sed command is used to replace a part of the string.  The sed command (stream editor) is a program in its own right and has a separate manual page.

==Redirection==

The standard output from a program can be directed to a file or a device,

# Print a string to a file
echo "This is a file" > file.txt

# Print the contents of the file on the screen
cat file.txt

The operator ">" truncates the file and then appends the standard output to the file.  To append to a file without truncation, the ">>" operator should be used.

If a command produces a lot of output which is not needed, the output can be sent to /dev/null instead:

# Run a command, but throw away the standard output and standard error
rm /tmp &> /dev/null # Thankfully, this command will fail.

A file can be used as the standard input of a command by using "<".  This will be discussed later in the context of loops.

==Variables==

A variable is defined by assigning it a value,

myName="JohnDoe"

BASH is very sensitive to the use of white spaces.  For the declaration to be interpreted correctly there must not be any spaces between the variable name and the equals sign or the equals sign and the value.

Once a variable has been defined, it is used by prepending the name with a dollar sign,

echo $myName

Variables which are defined in one shell are not available in a sub-shell unless they are exported,

export myName="JohnDoe"

where the variable can be exported when it is declared or afterwards.

==if-else conditions==

Logic conditions are inclosed in "[[]]" parentheses.  The status of a variable can be tested using a logic condition,

#!/bin/bash
if [[ -z $myName ]]; then
  echo "myName is not defined"
else
  echo "myName is defined as \"$myName\""
fi

In this case the first condition is true if the variable is not set.  At least
one white space must separate the pieces of the logic condition.  Save this script, change its permissions and execute it.  Then try

export myName=$HOSTNAME

and run the program again.  Then try 

unset myName

and run the program again.  The unset command removes the variable myName.  BASH also provides else-if statements:

if [[ $var == 1 ]]; then
  cat /proc/cpu # Check the CPU type
elif [[ $var == 2 ]]; then
  cat /proc/meminfo # Memory information
else
  date -I # The current date
fi

A summary table of logic tests which can be applied to a variable are given below,

....add the table here....

==for loop==

BASH provides many familiar loop structures.  The for loop is most commonly
used with input files or variables,

#!/bin/bash
# Declare a string with values separated by white spaces
list="a b c"
# print each character in the 'list' variable.
for l in $list; do
  echo $l
done

This can also be written on one line as

list="a b c"; for l in $list; do echo $l; done

where several of the newline characters in the script file are replaced with semi-colons.  The variable list can be replaced with an input file,

#!/bin/bash
# Fill a file with some strings
echo "Apple Orange" > list # Truncate and then append
echo "Pear" >> list # Append to list
# print each word in the input file.
for l in $(<list); do
  echo $l
done

This example uses a redirection from an input file to read each word.  BASH separates the words using the space or the new line character.

For loops also support C-like iteration,

#!/bin/bash
# Print all numbers from 1 to 10
for (( i=1; i<=10; i++ )); do
  echo $i
done

Notice that the variable i is not prefixed by a dollar sign within the (()) parentheses of the for loop.  This is an exception for this type of for loop.

==Evaluating commands==

A command can be evaluated by writing it within $().  For example,

dir_list=$(ls )

fills the variable dir_list with the text returned by the ls command.  The
syntax $() can be directly used as a variable.  This can be useful within a for loop,

#!/bin/bash
for file in $(ls *.txt); do
  gzip $file
done

where this example gzips all of the text files in the present working directory.

Command evaluations can be nested,

touch /tmp/t1 # Create a zero length file to test basename
$(basename $(ls /tmp/t1)) # Print the name of the file only

and can include variables,

file=/tmp/t1
$(basename $(ls $file))

Each of the commands can include pipe operations,

files_to_gzip=$(ls * | grep -v .gz)

where this command excludes file names which include ".gz" from the variable.  The pipe operator "|" passes the standard output from one command to the standard input of another command.

Challenge problem

Write a program to gzip all of the files in the present working directory.  The program should not gzip files which have the .gz ending.  The solution to the problem will be given in the next tutorial.

Article by W. H. Bell

The solution uses a new mask to encrypt each character.  The numbers returned from newMask follow a series, which is repeatable for a given value of the input seed.  Therefore, the encryption key is the random number seed. 

Bitwise operators 

The main bitwise operators are summarised in the table below.









These operators are typically used with integer variable types or signal bytes stored in char variables.  They act on the binary form of the number and are typically used for bit packing or testing packed bits.  For example, if the status of several switches needs to be read, their input could be stored in one integer variable.

As revision of the second tutorial, the decimal values of each bit can be printed with the program below:

  #include <stdio.h>
  int main() {
    int bit = 0, i = 1;
    while(i>0) { /* Loop until the sign bit is set */
      printf(" pow(2,%2d) = %11d\n",bit,i);
      i = i<<1; /* Shift value of i left by one. */ 
      bit++; /* Increment the counter by one. */
    }
    return 0; /* Return success to the operating system. */
  }

In this example, the value stored in the variable i is shifted one place to the left.  The left shift operator has the effect of moving all of the bits in the variable i one place to the left.  If a bit is shifted outside the memory allocation of the variable i, the bit is lost.  In this case, i only contains one.  Therefore, the action of the left shift operator is to move to the next power of two.  When the bit in the variable i is moved into the sign bit the number becomes negative which causes the while loop to stop.

The & operator is very useful for testing if bits are set.  This can be combined with the left or right shift operator to test every bit in a integer variable,

  #include <stdio.h>
  int main() {
    char str[33]; /* Declare a character array to hold the output. */
    int bit, i = 235643; /* Declare a number to convert to binary. */
    for(bit=31;bit>0;bit--) { /* Loop from left to right */
      if(((1<<bit) & i) == 0) str[31-bit] = '0'; /* False */
      else str[31-bit] = '1'; /* True */
    }
    str[32]='\0'; /* Add the string terminator */
    printf("%d (decimal) = %s (binary)\n", i, str);
    return 0; /* Return success to the operating system. */
  }

In this example program, each character in the char array is set according to the binary value.  Then to complete the string, the string terminator is added.  Finally, the binary form of the integer number is printed.

System commands

It can be useful to be able to run shell commands or other programs without directly linking to an associated library.  This can be accomplished with the system function,

  #include <stdlib.h>
  int main() {
    system("ls ./"); /* List the files in current directory. */
    return 0; /* Return success to the operating system. */
  }

The system function evaluates the string argument passed to it as if it had been typed at the command line.  The standard output from the command is not captured by the program and is instead printed on the screen.

The standard output from a system command or program can be captured using a pipe.  Pipes follow the same syntax as regular file functions, allowing reading, write and bidirectional connections.  For example, the contents of the current directory can be read into a program using, 

  #include <stdio.h>
  int main() {
    int c;
    FILE *ptr = 0; /* Create a null FILE pointer */
    ptr = popen("ls ./", "r"); /* List the files in the directory and listen */
    if(!ptr) return 1; /* If the command fails return failure. */
    while((c=fgetc(ptr)) != EOF) { /* Read each character. */
      printf("%c",(char)c); /* Print the characters. */
    }
    pclose(ptr); /* Close the pipe */
    return 0; /* Return success to the operating system. */
  }

In this case, each file name returned is available within the program.  

Any command that can be typed at the command line can be executed using system or popen. Rather than just call simple shell functions, these command can be used to plot data using gnuplot,

  #include <stdlib.h>
  #include <stdio.h>
  int main(int argc, char *argv[]) {
    int x_min = 0, x_max = 4; /* Set the range for the plot. */
    char commandStr[100], systemCmd[200];
    if(argc < 2) {
      printf("Usage %s <function>\n", argv[0]); /* One argument is needed.*/
      return 1; /* Return error. */
    }
    /* Build the command in two steps to show what is going on. */
    sprintf(commandStr, "plot [x=%d:%d] %s(x)", x_min, x_max, argv[1]);

    /* Run the command so that gnuplot stays open. */
    sprintf(systemCmd,"echo \"%s\" | gnuplot --persist",commandStr);
    system(systemCmd); /* Tell gnuplot to plot it. */
    return 0; /* Return success to the operating system. */
  }

Before trying this example, gnuplot should be installed by typing:

  sudo apt-get gnuplot-x11

Then once the program has been compiled try, ./gplot sin  The --persist flag causes the gnuplot window to stay open after the program has finished.  More information on the gnuplot program is available at, http://www.gnuplot.info/

Monitoring a LINUX system

There are several useful functions which are available under LINUX, but are not implemented in the same way on other operating systems.  For example, the status of the memory can be retrieved using the sysinfo,

  #include <stdio.h>
  #include <sys/sysinfo.h>
  int main() {
    struct sysinfo info; /* Create a sysinfo instance to hold the result. */
    sysinfo(&info); /* Get the system information */
    printf("Memory used = %d\n",info.totalram - info.freeram);
    return 0; /* Return success to the operating system. */
  }

where the sys/sysinfo.h is available on LINUX, but not OSX or MS Windows.  Before the system information can be retrieved, a struct variable of sysinfo type is created.  This is not a simple variable, but contains several variables.  The member variables of the struct are accessed using the "." operator.  When sysinfo is called, the address of the struct variable of systinfo type is passed to the function.  The function then writes the status into the member variables of the struct.

In the final example for this tutorial, gnuplot is used to plot the memory usage as a function of time:

  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <sys/sysinfo.h>
  int main() {
    int i, ramUsed;
    char gnuplotCmd[250], systemCmd[350];
    FILE *outPtr = 0;
    char fileName[50];
    sprintf(fileName,"data.txt"); /* The name of the output file. */
    struct sysinfo info; /* A sysinfo struct to hold the status. */
    outPtr = fopen(fileName,"w"); /* Open the output file. */
    if(!outPtr) return 1; /* If the output file cannot be opened return error */
    for(i=0;i<60;i++) {
      sysinfo(&info);  /* Get the system information */
      ramUsed = info.totalram - info.freeram;
      fprintf(outPtr,"%d %d\n", i, ramUsed); /* Write the ram used. */
      usleep(500000); /* Sleep for 1/2 a second. */
    }
    fclose(outPtr); /* Close the output file. */ 

    /* Now plot the data */
    sprintf(gnuplotCmd, "plot \'%s\'\n", fileName); /* Build the plot command. */

    /* Create the full command, including the pipe to gnuplot */
    sprintf(systemCmd,"echo \"%s\" | gnuplot --persist",gnuplotCmd);
    
    system(systemCmd); /* Execute the system command. */
    return 0; /* Return success to the system. */
  }

where the sys/sysinfo.h header file is available on LINUX and the unistd.h header file is available on LINUX or OSX.  The program writes the memory usage to an output file every half a second.  Then gnuplot is run to plot the memory usage as a function of time.

Challenge problem

Modify the previous example program to write an output file using the return value of the command hostname to form a file name.  Then plot the memory used and the system load while running one or more other programs.  The loads[3] member variable of the sysinfo struct holds the, one, five and fifteen minute load averages.  Try using, 

  fprintf(outPtr,"%d %f %d\n", i, ramUsed/10240.0, info.loads[0]);

to write the data file.  Then plot the data using two strings,

  sprintf(gnuplotCmdOne, "plot \'%s\' using 1:2 title \'%s\'", fileName, "Ram used");
  sprintf(gnuplotCmdTwo, ", \'%s\' using 1:3 title \'%s\'\n", fileName, "Load");

  /* Create the full command, including the pipe to gnuplot */
  sprintf(systemCmd,"echo \"%s%s\" | gnuplot -persist",gnuplotCmdOne,gnuplotCmdTwo);

The solution to the problem will be given next time. 
Article by W. H. Bell